"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveOutputPath = resolveOutputPath;
exports.themeInterfaceDestination = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const exists = (0, _util.promisify)(_fs.default.exists);
const themeInterfaceDestination = ["node_modules", "@chakra-ui", "styled-system", "dist", "theming.types.d.ts"];
exports.themeInterfaceDestination = themeInterfaceDestination;

async function resolveThemingDefinitionPath() {
  const baseDir = _path.default.join("..", "..", "..");

  const cwd = process.cwd();
  const pathsToTry = [_path.default.resolve(baseDir, "..", ...themeInterfaceDestination), _path.default.resolve(baseDir, "..", "..", ...themeInterfaceDestination), _path.default.resolve(cwd, ...themeInterfaceDestination), _path.default.resolve(cwd, "..", ...themeInterfaceDestination), _path.default.resolve(cwd, "..", "..", ...themeInterfaceDestination)];
  const triedPaths = await Promise.all(pathsToTry.map(async possiblePath => {
    if (await exists(possiblePath)) {
      return possiblePath;
    }

    return "";
  }));
  return triedPaths.find(Boolean);
}

async function resolveOutputPath(overridePath) {
  if (overridePath) {
    return _path.default.resolve(process.cwd(), overridePath);
  }

  const themingDefinitionFilePath = await resolveThemingDefinitionPath();

  if (!themingDefinitionFilePath) {
    throw new Error("Could not find @chakra-ui/styled-system in node_modules. Please provide `--out` parameter.");
  }

  return themingDefinitionFilePath;
}