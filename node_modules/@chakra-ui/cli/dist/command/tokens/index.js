"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateThemeTypings = generateThemeTypings;
Object.defineProperty(exports, "themeInterfaceDestination", {
  enumerable: true,
  get: function () {
    return _resolveOutputPath.themeInterfaceDestination;
  }
});

var _util = require("util");

var _fs = require("fs");

var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));

var _ora = _interopRequireDefault(require("ora"));

var _resolveOutputPath = require("./resolve-output-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const writeFileAsync = (0, _util.promisify)(_fs.writeFile);

async function runTemplateWorker({
  themeFile,
  strictComponentTypes,
  format,
  strictTokenTypes,
  template
}) {
  const worker = (0, _child_process.fork)(_path.default.join(__dirname, "..", "..", "scripts", "read-theme-file.worker.js"), [themeFile].concat(strictComponentTypes ? "--strict-component-types" : []).concat(format ? "--format" : []).concat(strictTokenTypes ? "--strict-token-types" : []).concat(template ? `--template=${template}` : []), {
    stdio: ["pipe", "pipe", "pipe", "ipc"],
    cwd: process.cwd()
  });
  return new Promise((resolve, reject) => {
    worker.on("message", message => {
      const errMessage = message?.err;

      if (errMessage) {
        reject(new Error(errMessage));
      }

      return resolve(String(message));
    });
    worker.on("error", reject);
  });
}

async function generateThemeTypings({
  themeFile,
  out,
  strictComponentTypes,
  format,
  strictTokenTypes,
  template,
  onError
}) {
  const spinner = (0, _ora.default)("Generating chakra theme typings").start();

  try {
    const themeTypings = await runTemplateWorker({
      themeFile,
      strictComponentTypes,
      format,
      strictTokenTypes,
      template
    });
    const outPath = await (0, _resolveOutputPath.resolveOutputPath)(out);
    spinner.info();
    spinner.text = `Write file "${outPath}"...`;
    await writeFileAsync(outPath, themeTypings, "utf8");
    spinner.succeed("Done");
  } catch (e) {
    spinner.fail("An error occurred");

    if (e instanceof Error) {
      console.error(e.message);
    }

    spinner.stop();
    onError?.();
  } finally {
    spinner.stop();
  }
}