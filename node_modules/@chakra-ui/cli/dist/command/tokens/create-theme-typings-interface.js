"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createThemeTypingsInterface = createThemeTypingsInterface;

var _extractPropertyPaths = require("./extract-property-paths");

var _extractComponentTypes = require("./extract-component-types");

var _extractColorSchemes = require("./extract-color-schemes");

var _extractPropertyKeys = require("./extract-property-keys");

var _formatWithPrettier = require("../../utils/format-with-prettier");

var _isObject = require("../../utils/is-object");

function applyThemeTypingTemplate(typingContent, template) {
  switch (template) {
    case "augmentation":
      return `// regenerate by running
// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts) --template augmentation --out path/to/this/file 
import { BaseThemeTypings } from "@chakra-ui/styled-system";
declare module "@chakra-ui/styled-system" {
  export interface CustomThemeTypings extends BaseThemeTypings {
    ${typingContent}
  }
}
`;

    case "default":
    default:
      return `// regenerate by running
// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)
import { BaseThemeTypings } from "./shared.types.js"
export interface ThemeTypings extends BaseThemeTypings {
  ${typingContent}
}
`;
  }
}

async function createThemeTypingsInterface(theme, {
  config,
  strictComponentTypes = false,
  format = true,
  strictTokenTypes = false,
  template = "default"
}) {
  const unions = config.reduce((allUnions, {
    key,
    maxScanDepth,
    filter = () => true,
    flatMap = value => value
  }) => {
    const target = theme[key];
    allUnions[key] = [];

    if ((0, _isObject.isObject)(target) || Array.isArray(target)) {
      allUnions[key] = (0, _extractPropertyPaths.extractPropertyPaths)(target, maxScanDepth).filter(filter).flatMap(flatMap);
    }

    if ((0, _isObject.isObject)(theme.semanticTokens)) {
      const semanticTokenKeys = (0, _extractPropertyKeys.extractPropertyKeys)(theme.semanticTokens, key).filter(filter).flatMap(flatMap);
      allUnions[key].push(...semanticTokenKeys);
    }

    return allUnions;
  }, {});
  const textStyles = (0, _extractPropertyKeys.extractPropertyKeys)(theme, "textStyles");
  const layerStyles = (0, _extractPropertyKeys.extractPropertyKeys)(theme, "layerStyles");
  const colorSchemes = (0, _extractColorSchemes.extractColorSchemeTypes)(theme);
  const componentTypes = (0, _extractComponentTypes.extractComponentTypes)(theme);
  const typingContent = `${(0, _extractPropertyPaths.printUnionMap)({ ...unions,
    textStyles,
    layerStyles,
    colorSchemes
  }, strictTokenTypes)}
  ${(0, _extractComponentTypes.printComponentTypes)(componentTypes, strictComponentTypes)}`;
  const themeTypings = applyThemeTypingTemplate(typingContent, template);
  return format ? (0, _formatWithPrettier.formatWithPrettierIfAvailable)(themeTypings) : themeTypings;
}