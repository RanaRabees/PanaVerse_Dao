"use strict";

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var tsNode = _interopRequireWildcard(require("ts-node"));

var tsConfigPaths = _interopRequireWildcard(require("tsconfig-paths"));

var _createThemeTypingsInterface = require("../command/tokens/create-theme-typings-interface");

var _config = require("../command/tokens/config");

var _isObject = require("../utils/is-object");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bold = text => `\x1B[1m${text}\x1B[22m`;

async function importTheme(path2) {
  const module = await Promise.resolve(`${path2}`).then(s => require(s));
  const theme = module.default ?? module.theme;
  if (!theme) throw new Error(`
    Theme export not found in module: '${path2}'.

    A theme should have a ${bold("default")} export or a ${bold("theme")} named export.
    Found the following exports: ${bold(Object.keys(module).join(", "))}
  `);
  return theme;
}

async function readTheme(themeFilePath) {
  const cwd = process.cwd();

  const absoluteThemePath = _path.default.join(cwd, themeFilePath);

  const absoluteThemeDir = _path.default.dirname(absoluteThemePath);

  const tsConfig = tsConfigPaths.loadConfig(absoluteThemeDir);

  if (tsConfig.resultType === "success") {
    tsNode.register({
      project: tsConfig.configFileAbsolutePath,
      compilerOptions: {
        module: "CommonJS",
        esModuleInterop: true
      },
      transpileOnly: true,
      swc: true
    });
    tsConfigPaths.register();
  } else {
    const defaultProject = _path.default.join(__dirname, "..", "..", "bin", "tsconfig.json");

    tsNode.register({
      project: defaultProject
    });
  }

  try {
    await _fs.default.promises.stat(absoluteThemePath);
    return await importTheme(absoluteThemePath);
  } catch (statError) {
    try {
      return importTheme(require.resolve(themeFilePath, {
        paths: [cwd]
      }));
    } catch (resolveError) {
      throw new Error(`Theme file or package not found 
${statError} 
${resolveError}`);
    }
  }
}

async function run() {
  const themeFile = process.argv[2];
  const strictComponentTypes = process.argv.includes("--strict-component-types");
  const format = process.argv.includes("--format");
  const strictTokenTypes = process.argv.includes("--strict-token-types");
  const templateArg = process.argv.find(arg => arg.includes("--template="));
  const template = templateArg ? templateArg.split("=")[1] : void 0;

  if (!themeFile) {
    throw new Error("No path to theme file provided.");
  }

  console.log(themeFile);
  const theme = await readTheme(themeFile);

  if (!(0, _isObject.isObject)(theme)) {
    throw new Error("Theme not found in default or named `theme` export");
  }

  const themeTypings = await (0, _createThemeTypingsInterface.createThemeTypingsInterface)(theme, {
    config: _config.themeKeyConfiguration,
    strictComponentTypes,
    format,
    strictTokenTypes,
    template
  });

  if (process.send) {
    process.send(themeTypings);
  } else {
    process.stdout.write(themeTypings);
  }
}

run().catch(e => {
  const err = `${e.toString()}
${e.stack}`;

  if (process.send) {
    process.send({
      err
    });
  } else {
    process.stderr.write(err);
  }

  process.exit(1);
});